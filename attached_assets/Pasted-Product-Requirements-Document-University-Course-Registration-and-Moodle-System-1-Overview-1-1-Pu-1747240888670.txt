Product Requirements Document: University Course Registration and Moodle System
1. Overview
1.1 Purpose
The Course Registration and Moodle System is a web-based platform designed for universities to streamline course registration, manage academic records, and provide a robust Learning Management System (LMS) via Moodle integration. The system aims to enhance the academic experience for students, faculty, and administrators by offering a centralized, user-friendly, and secure platform.
1.2 Goals

Enable students to browse, register, and manage their courses efficiently.
Provide faculty with tools to manage course content, assignments, and grades.
Integrate with Moodle for course materials, quizzes, forums, and gradebooks.
Support administrative tasks like course scheduling, student records, and reporting.
Ensure scalability, security, and accessibility for a diverse university population.

1.3 Scope
The Minimum Viable Product (MVP) will include:

User authentication and role-based access (students, faculty, admins).
Course catalog and registration system.
Moodle integration for course content and grade management.
Admin dashboard for managing users, courses, and schedules.
Responsive design for desktop and mobile access.
Basic analytics and reporting.

Future phases may include advanced features like AI-driven course recommendations, mobile apps, and integration with third-party tools (e.g., Zoom, payment gateways).
2. Target Audience

Students: Undergraduates and graduates needing to register for courses, access materials, submit assignments, and view grades.
Faculty: Professorsbury Professors and instructors managing course content, assignments, grades, and student interactions.
Administrators: Staff managing course schedules, student records, and system configurations.
Demographics: University community, primarily aged 18–60, with varying technical proficiency.
User Needs:
Students: Intuitive course registration, easy access to Moodle resources, and academic progress tracking.
Faculty: Tools for course setup, grading, and communication with students.
Admins: Efficient management of academic operations and compliance with regulations.



3. Functional Requirements
3.1 User Authentication and Roles

Sign-Up/Login:
Single Sign-On (SSO) via university credentials (e.g., OAuth with Shibboleth or SAML).
Multi-factor authentication (MFA) for enhanced security.


Roles:
Student: Register for courses, access Moodle, view grades.
Faculty: Manage courses, upload content, grade assignments.
Admin: Manage users, courses, schedules, and system settings.


Profile Management:
Students: Update contact info, view academic history.
Faculty: Manage office hours, contact details.
Admins: Access user management tools.



3.2 Course Registration System

Course Catalog:
Browse courses by department, level, semester, or keyword.
Filters: availability, prerequisites, credits, and delivery mode (in-person, online, hybrid).
Display course details: description, instructor, schedule, location, and syllabus.


Registration:
Students can add/drop courses within registration windows.
Enforce prerequisites, credit limits, and enrollment caps.
Waitlist functionality for full courses.


Schedule Builder:
Visual timetable to avoid conflicts.
Export schedules to calendar apps (e.g., Google Calendar, iCal).


Notifications:
Email/SMS alerts for registration deadlines, waitlist updates, and schedule changes.



3.3 Moodle Integration

Course Shells:
Automatically create Moodle course shells for each registered course.
Sync student and faculty rosters from the registration system.


Content Management:
Faculty can upload lecture slides, readings, and videos.
Support for multimedia embedding (e.g., YouTube, university-hosted videos).


Assignments and Quizzes:
Create, distribute, and collect assignments via Moodle.
Support timed quizzes with question banks and auto-grading.


Gradebook:
Faculty can enter grades in Moodle, synced to the registration system.
Students view grades and feedback within Moodle.


Communication:
Discussion forums and announcements within Moodle.
Integration with university email for notifications.



3.4 Faculty Tools

Course Management:
Edit course details, schedules, and syllabi.
Monitor student enrollment and participation.


Analytics:
View student engagement metrics (e.g., Moodle logins, assignment submissions).
Identify at-risk students based on participation and grades.


Office Hours:
Schedule and manage virtual or in-person office hours.
Integration with Zoom for virtual meetings (optional).



3.5 Admin Dashboard

User Management:
Add, edit, or deactivate student and faculty accounts.
Assign roles and permissions.


Course Management:
Create and schedule courses, assign instructors.
Manage academic calendars and registration periods.


Reporting:
Generate reports on enrollment, course demand, and grade distributions.
Export data in CSV/PDF formats for compliance.


System Configuration:
Manage semesters, departments, and academic policies.
Configure Moodle settings (e.g., themes, plugins).



3.6 Student Portal

Dashboard:
Show enrolled courses, upcoming assignments, and grades.
Quick links to Moodle, schedule, and registration.


Academic Records:
View transcripts, GPA, and degree progress.
Request official transcripts (admin approval required).


Support:
Access helpdesk ticketing system for technical or academic issues.
FAQ and knowledge base for common queries.



4. Non-Functional Requirements
4.1 Performance

Page load time: <2 seconds for course catalog and Moodle pages.
Concurrent users: Support 5,000 simultaneous users during peak registration.
API response time: <500ms for 95% of requests.

4.2 Security

Encrypt data in transit (HTTPS) and at rest (AES-256).
Comply with FERPA and GDPR for student data privacy.
Implement role-based access control (RBAC) and audit logs.
Regular penetration testing and vulnerability scans.

4.3 Accessibility

Comply with WCAG 2.1 AA standards.
Support screen readers, keyboard navigation, and alt text for images.
Multilingual support (English initially, extensible for others).

4.4 Compatibility

Responsive design for desktop, tablet, and mobile.
Support Chrome, Firefox, Safari, Edge (latest versions).
Moodle compatibility with latest stable version (e.g., Moodle 4.x).

4.5 Availability

Target 99.95% uptime, excluding scheduled maintenance.
Implement load balancing and failover for high availability.
Backup data daily with off-site storage.

5. Technical Requirements
5.1 Frontend

Framework: React.js with Tailwind CSS for styling.
State Management: Redux for complex state handling.
CDN: Use jsDelivr for React, Babel, and dependencies.
Accessibility: Use ARIA attributes and semantic HTML.

5.2 Backend

Framework: Node.js with Express.js for RESTful APIs.
Database: PostgreSQL for user data, courses, and registrations.
Moodle Backend: PHP with MySQL (standard Moodle setup).
Authentication: Integrate with university SSO (e.g., Keycloak or Shibboleth).
API Security: JWT for internal APIs, OAuth for external integrations.

5.3 Integration

Moodle APIs: Use Moodle Web Services for roster sync, gradebook, and content management.
SSO: SAML or OpenID Connect for university authentication.
Calendar: iCal/ICS for schedule exports.
Email/SMS: Integrate with AWS SES or Twilio for notifications.

5.4 Hosting and Deployment

Hosting: AWS (EC2 for servers, RDS for PostgreSQL, EFS for Moodle files).
Containerization: Docker for Moodle and backend services.
CI/CD: GitHub Actions for automated testing and deployment.
Monitoring: Prometheus and Grafana for performance and uptime tracking.

5.5 Data Model (Simplified)

Users: id, email, role, name, university_id, preferences.
Courses: id, code, title, description, credits, prerequisites, instructor_id.
Enrollments: student_id, course_id, status (registered, waitlisted, dropped).
Schedules: course_id, semester, time, location, delivery_mode.
Grades: student_id, course_id, assignment_id, score, feedback.
Moodle Courses: moodle_course_id, course_id, roster_synced_at.

6. User Flow

Student:
Logs in via SSO, views dashboard.
Browses course catalog, registers for courses, and builds schedule.
Accesses Moodle for course materials, submits assignments, and checks grades.
Requests support via helpdesk if needed.


Faculty:
Logs in, sets up course content in Moodle.
Manages assignments, grades, and student communications.
Monitors engagement analytics and schedules office hours.


Admin:
Logs into dashboard, creates courses and schedules.
Manages user accounts and monitors system health.
Generates reports for academic oversight.



7. Success Metrics

User Adoption:
90% of students register via the system within the first semester.
80% of faculty use Moodle for assignments and grading.


Engagement:
Average student logins: ≥3 per week during semester.
Assignment submission rate: ≥95% for registered students.


Performance:
System uptime: ≥99.95% during registration periods.
Registration errors: <1% of transactions.


Satisfaction:
User satisfaction score: ≥4/5 via post-semester survey.



8. Assumptions and Constraints

Assumptions:
University provides SSO infrastructure and student/faculty data.
Moodle hosting meets performance requirements.
Users have access to modern browsers and reliable internet.


Constraints:
Development timeline: 6–8 months for MVP.
Budget for cloud hosting and Moodle maintenance.
Limited to one university’s academic policies initially.



9. Risks and Mitigation

Risk: SSO integration delays.
Mitigation: Test SSO early with university IT and provide fallback login.


Risk: Peak load during registration.
Mitigation: Use auto-scaling on AWS and stress-test system.


Risk: Data privacy breaches.
Mitigation: Encrypt data, conduct security audits, and train staff on FERPA.


Risk: Faculty resistance to Moodle.
Mitigation: Offer training sessions and user-friendly documentation.



10. Timeline and Milestones

Month 1–2: Requirements analysis, wireframing, and SSO integration.
Month 3–4: Backend APIs, database setup, and Moodle configuration.
Month 5–6: Frontend development, Moodle integration, and testing.
Month 7: Beta launch with pilot group, user feedback collection.
Month 8: Bug fixes, performance optimization, and full rollout.
Post-Launch: Monitor usage, iterate based on feedback.

11. Future Enhancements

AI-driven course recommendations based on academic history.
Mobile app for iOS and Android with offline Moodle access.
Integration with payment gateways for tuition/fees.
Advanced analytics for predicting student success.
Support for multiple universities with customizable policies.

12. Appendix

Wireframes: To be created during planning (e.g., Figma mockups).
Moodle Docs: Refer to https://docs.moodle.org for API and setup guides.
Competitors: Blackboard, Canvas, D2L Brightspace.
Standards: FERPA, GDPR, WCAG 2.1, IMS Global LTI for interoperability.

